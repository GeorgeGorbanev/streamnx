package youtube

import (
	"testing"

	"github.com/stretchr/testify/require"
)

func TestVideo_URL(t *testing.T) {
	video := Video{ID: "dQw4w9WgXcQ"}
	result := video.URL()
	require.Equal(t, "https://www.youtube.com/watch?v=dQw4w9WgXcQ", result)
}

func TestVideo_IsAutogenerated(t *testing.T) {
	tests := []struct {
		name        string
		description string
		want        bool
	}{
		{
			name:        "not autogenerated",
			description: "sample not autogenerated description",
			want:        false,
		},
		{
			name: "autogenerated",
			description: "Provided to YouTube by Parlophone UK\n\nSpace Oddity (2015 Remaster) · " +
				"David Bowie\n\nDavid Bowie (aka Space Oddity)\n\n℗ 1969, 2015 Jones/Tintoretto Entertainment Company " +
				"LLC under exclusive licence to Parlophone Records Ltd, a Warner Music Group Company\n\nEngineer: " +
				"Barry Sheffield\nAcoustic  Guitar: David Bowie\nKeyboards, Vocals: David Bowie\nProducer: " +
				"Gus Dudgeon\nBass: Herbie Flowers\nUnknown: Ken Scott\nUnknown: Ken Scott\nEngineer: Malcolm Toft\n" +
				"Guitar: Mick Wayne\nRemastering  Engineer: Ray Staff\nMellotron: Rick Wakeman\nDrums: Terry Cox\n" +
				"Writer: David Bowie\n\nAuto-generated by YouTube.",
			want: true,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			v := &Video{Description: tt.description}
			require.Equal(t, tt.want, v.IsAutogenerated())
		})
	}
}

func TestVideo_Artist(t *testing.T) {
	tests := []struct {
		name         string
		channelTitle string
		want         string
	}{
		{
			name:         "not autogenerated",
			channelTitle: "David Bowie",
			want:         "",
		},
		{
			name:         "autogenerated",
			channelTitle: "David Bowie - Topic",
			want:         "David Bowie",
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			v := &Video{ChannelTitle: tt.channelTitle}
			require.Equal(t, tt.want, v.Artist())
		})
	}
}

func TestPlaylist_URL(t *testing.T) {
	playlist := Playlist{ID: "PLMC9KNkIncKtPzgY-5rmhvj7fax8fdxoj"}
	result := playlist.URL()
	require.Equal(t, "https://www.youtube.com/playlist?list=PLMC9KNkIncKtPzgY-5rmhvj7fax8fdxoj", result)
}

func TestPlaylist_IsAutogenerated(t *testing.T) {
	tests := []struct {
		name  string
		title string
		want  bool
	}{
		{
			name:  "not autogenerated",
			title: "sample not autogenerated title",
			want:  false,
		},
		{
			name:  "autogenerated",
			title: "Album - David Bowie",
			want:  true,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			v := &Playlist{Title: tt.title}
			require.Equal(t, tt.want, v.IsAutogenerated())
		})
	}
}

func TestPlaylist_Album(t *testing.T) {
	tests := []struct {
		name  string
		title string
		want  string
	}{
		{
			name:  "not autogenerated",
			title: "Space Oddity",
			want:  "Space Oddity",
		},
		{
			name:  "autogenerated",
			title: "Album - Space Oddity",
			want:  "Space Oddity",
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			p := &Playlist{Title: tt.title}
			require.Equal(t, tt.want, p.Album())
		})
	}
}

func Test_DetectTrackID(t *testing.T) {
	tests := []struct {
		name          string
		input         string
		expected      string
		expectedError error
	}{
		{
			name:     "Short URL",
			input:    "https://youtu.be/dQw4w9WgXcQ",
			expected: "dQw4w9WgXcQ",
		},
		{
			name:     "Long URL",
			input:    "https://www.youtube.com/watch?v=dQw4w9WgXcQ",
			expected: "dQw4w9WgXcQ",
		},
		{
			name:     "URL with extra parameters",
			input:    "https://www.youtube.com/watch?v=dQw4w9WgXcQ&feature=youtu.be",
			expected: "dQw4w9WgXcQ",
		},
		{
			name:     "Youtube music URL",
			input:    "https://music.youtube.com/watch?v=5PgdZDXg0z0&si=LkthPMI6H_I04dhP",
			expected: "5PgdZDXg0z0",
		},
		{
			name:     "Invalid URL",
			input:    "https://www.youtube.com/watch?v=",
			expected: "",
		},
		{
			name:     "Non-YouTube URL",
			input:    "https://www.example.com/watch?v=dQw4w9WgXcQ",
			expected: "",
		},
		{
			name:     "Empty string",
			input:    "",
			expected: "",
		},
		{
			name:     "Invalid URL",
			input:    "https://www.youtube.com/watch?v=notFound",
			expected: "",
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result := DetectTrackID(tt.input)
			require.Equal(t, tt.expected, result)
		})
	}
}

func Test_DetectAlbumID(t *testing.T) {
	tests := []struct {
		name     string
		input    string
		expected string
	}{
		{
			name:     "Standard URL",
			input:    "https://www.youtube.com/playlist?list=PLMC9KNkIncKtPzgY-5rmhvj7fax8fdxoj",
			expected: "PLMC9KNkIncKtPzgY-5rmhvj7fax8fdxoj",
		},
		{
			name:     "Shortened URL",
			input:    "https://youtu.be/playlist?list=PLMC9KNkIncKtPzgY-5rmhvj7fax8fdxoj",
			expected: "PLMC9KNkIncKtPzgY-5rmhvj7fax8fdxoj",
		},
		{
			name:     "URL with extra parameters",
			input:    "https://www.youtube.com/playlist?list=PLMC9KNkIncKtPzgY-5rmhvj7fax8fdxoj&feature=share",
			expected: "PLMC9KNkIncKtPzgY-5rmhvj7fax8fdxoj",
		},
		{
			name:     "Youtube music URL",
			input:    "https://music.youtube.com/playlist?list=OLAK5uy_n4xauusTJSj6Mtt4cIuq4KZziSfjABYWU",
			expected: "OLAK5uy_n4xauusTJSj6Mtt4cIuq4KZziSfjABYWU",
		},
		{
			name:     "Invalid URL",
			input:    "https://www.example.com/playlist?list=PLMC9KNkIncKtPzgY-5rmhvj7fax8fdxoj",
			expected: "",
		},
		{
			name:     "Empty string",
			input:    "",
			expected: "",
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result := DetectAlbumID(tt.input)
			require.Equal(t, tt.expected, result)
		})
	}
}
